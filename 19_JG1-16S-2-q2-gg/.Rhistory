track <- filterAndTrim(nop, filt, maxEE=1, minLen=1400, maxLen=1600, verbose=TRUE)
plotQualityProfile(filt)
cbind(raw=out[,1], primers=out[,2], filtered=track[,2])
err <- learnErrors(filt, multi=TRUE, verbose=0)
plotErrors(err, nominalQ=TRUE)
saveRDS(err, err.rds)
err.rds <- file.path(path.rds, "err_16S_Fecal.rds") # RDS save/load to speed up reruns of the code
saveRDS(err, err.rds)
err.rds <- file.path(path.rds, "err_16S_Fecal.rds") # RDS save/load to speed up reruns of the code
if(!file.exists(err.rds)) {
err <- learnErrors(filt, multi=TRUE, verbose=0)
saveRDS(err, err.rds)
}
err <- readRDS(err.rds)
plotErrors(err, nominalQ=TRUE)
dd <- dada(filt, err, multi=TRUE)
dd
dd <- dada(filt, err, multi=TRUE, verbose=0)
dd
sta <- makeSequenceTable(dd)
st <- removeBimeraDenovo(sta, minFoldParentOverAbundance=4.5, multi=TRUE, verbose=TRUE)
tax.rds <- file.path(path.rds, "tax_16S_Fecal.rds") # RDS save/load to speed up reruns of the code
if(!file.exists(tax.rds)) {
tax <- assignTaxonomy(st, "~/tax/silva_nr_v132_train_set.fa.gz", minBoot=80, multi=TRUE)
saveRDS(tax, tax.rds)
}
tax <- readRDS(tax.rds)
if(!identical(getSequences(tax), getSequences(st))) stop("Taxonomy mismatch.")
table(tax[,"Genus"], useNA="ifany")
tax.rds <- file.path(path.rds, "tax_16S_Fecal.rds") # RDS save/load to speed up reruns of the code
if(!file.exists(tax.rds)) {
tax <- assignTaxonomy(st, "~/tax/silva_nr_v132_train_set.fa.gz", minBoot=80, multi=TRUE)
saveRDS(tax, tax.rds)
}
tax <- readRDS(tax.rds)
if(!identical(getSequences(tax), getSequences(st))) stop("Taxonomy mismatch.")
table(tax[,"Phylum"], useNA="ifany")
sum(st)/sum(sta)
pb.rds <- file.path(path.rds, "PacBio_Fecal_st2.rds")
st.pb <- readRDS(pb.rds)
rownames(st.pb)
rownames(st)
sam.names <- sapply(strsplit(rownames(st), "_"), `[`, 1) # e.g. R3.1_contig_list_trimmed.fq
rownames(st) <- sam.names; rownames(sta) <- sam.names
rownames(st.pb) <- gsub(rownames(st.pb), "_", "") # e.g. R_3.1
rownames(st.pb) <- gsub("_", "", rownames(st.pb)) # e.g. R_3.1
if(!all(rownames(st) %in% rownames(st.pb))) stop("Sample name mismatch.")
st.pb <- st.pb[rownames(st),]
pb.rds <- file.path(path.rds, "PacBio_Fecal_st2.rds")
st.pb <- readRDS(pb.rds)
sam.names <- sapply(strsplit(rownames(st), "_"), `[`, 1) # e.g. R3.1_contig_list_trimmed.fq
rownames(st) <- sam.names; rownames(sta) <- sam.names
rownames(st.pb) <- gsub("_", "", rownames(st.pb)) # e.g. R_3.1
if(!all(rownames(st) %in% rownames(st.pb))) stop("Sample name mismatch.")
st.pb <- st.pb[rownames(st),]
rownames(st.pb)
rownames(st)
rownames(sta)
head(nchar(getSequences(st)))
head(nchar(getSequences(st.pb)))
FWD.pacb <- "AGRGTTYGATYMTGGCTCAG"
FWD.loop <- "AGAGTTTGATCMTGGC"
REV.pacb <- "RGYTACCTTGTTACGACTT"
REV.loop <-    "TACCTTGTTACGACTT"
sq.loop.full <- getSequences(st)
sq.loop.trunc <- substr(sq.loop.full, 5, nchar(sq.loop.full))
any(duplicated(sq.loop.trunc))
any(sq.loop %in% getSequences(st.pb))
sq.loop.full <- getSequences(st)
sq.loop.trunc <- substr(sq.loop.full, 5, nchar(sq.loop.full))
any(sq.loop %in% getSequences(st.pb))
any(sq.loop.full %in% getSequences(st.pb))
any(sq.loop.trunc %in% getSequences(st.pb))
table(grepl("^TCAG", sq.loop.full))
table(grepl("^TCAG", sq.loop.trunc))
mean(grepl("^TCAG", sq.loop.full))
sq.loop.full <- getSequences(st)
sq.loop.trunc <- substr(sq.loop.full, 5, nchar(sq.loop.full))
any(duplicated(sq.loop.trunc)) # FALSE
if(mean(grepl("^TCAG", sq.loop.full)) < 0.95) stop("Trim issue, expected 4nt sequence not at start of these sequences.")
colnames(st) <- sq.loop.trunc; colnames(sta) <- sq.loop.trunc; rownames(tax) <- sq.loop.trunc
dim(tax)
dim(st)
dim(sta)
sq.loop.full <- getSequences(sta)
sq.loop.trunc <- substr(sq.loop.full, 5, nchar(sq.loop.full))
any(duplicated(sq.loop.trunc)) # FALSE
if(mean(grepl("^TCAG", sq.loop.full)) < 0.95) stop("Trim issue, expected 4nt sequence not at start of these sequences.")
colnames(st) <- sq.loop.trunc; rownames(tax) <- sq.loop.trunc
sta <- makeSequenceTable(dd)
st <- removeBimeraDenovo(sta, minFoldParentOverAbundance=4.5, multi=TRUE, verbose=TRUE)
tax.rds <- file.path(path.rds, "tax_16S_Fecal.rds") # RDS save/load to speed up reruns of the code
if(!file.exists(tax.rds)) {
tax <- assignTaxonomy(st, "~/tax/silva_nr_v132_train_set.fa.gz", minBoot=80, multi=TRUE)
saveRDS(tax, tax.rds)
}
tax <- readRDS(tax.rds)
if(!identical(getSequences(tax), getSequences(st))) stop("Taxonomy mismatch.")
table(tax[,"Phylum"], useNA="ifany")
pb.rds <- file.path(path.rds, "PacBio_Fecal_st2.rds")
st.pb <- readRDS(pb.rds)
sam.names <- sapply(strsplit(rownames(st), "_"), `[`, 1) # e.g. R3.1_contig_list_trimmed.fq
rownames(st) <- sam.names; rownames(sta) <- sam.names
rownames(st.pb) <- gsub("_", "", rownames(st.pb)) # e.g. R_3.1
if(!all(rownames(st) %in% rownames(st.pb))) stop("Sample name mismatch.")
st.pb <- st.pb[rownames(st),]
FWD.pacb <- "AGRGTTYGATYMTGGCTCAG"
FWD.loop <- "AGAGTTTGATCMTGGC"
REV.pacb <- "RGYTACCTTGTTACGACTT"
REV.loop <-    "TACCTTGTTACGACTT"
sq.loop.full <- getSequences(sta)
sq.loop.trunc <- substr(sq.loop.full, 5, nchar(sq.loop.full))
any(duplicated(sq.loop.trunc)) # FALSE
if(mean(grepl("^TCAG", sq.loop.full)) < 0.95) stop("Trim issue, expected 4nt sequence not at start of these sequences.")
st.loop <- st; tax.loop <- tax
colnames(st.loop) <- sq.loop.trunc; rownames(tax.loop) <- sq.loop.trunc
sq.loop.full <- getSequences(st)
sq.loop.trunc <- substr(sq.loop.full, 5, nchar(sq.loop.full))
any(duplicated(sq.loop.trunc)) # FALSE
if(mean(grepl("^TCAG", sq.loop.full)) < 0.95) stop("Trim issue, expected 4nt sequence not at start of these sequences.")
st.loop <- st; tax.loop <- tax
colnames(st.loop) <- sq.loop.trunc; rownames(tax.loop) <- sq.loop.trunc
foo <- getUniques(st.loop[1,])
table(foo)
unname(head(foo))
setASV <- function(unq.loop, unq.pb) {
unq.loop <- getUniques(unq.loop); unq.loop <- unq.loop[unq.loop > 0]
unq.pb <- getUniques(unq.pb); unq.pb <- unq.pb[unq.pb > 0]
c(Loop=sum(!names(unq.loop) %in% names(unq.pb)),
Shared=sum(names(unq.loop) %in% names(unq.pb)),
PacBio=sum(!names(unq.pb) %in% names(unq.loop)))
}
sapply(sam.names, function(nm) setASV(st.loop[nm,], st.pb[nm,]))
setASV <- function(unq.loop, unq.pb) {
unq.loop <- getUniques(unq.loop); unq.loop <- unq.loop[unq.loop > 0]
unq.pb <- getUniques(unq.pb); unq.pb <- unq.pb[unq.pb > 0]
c(Loop=sum(!names(unq.loop) %in% names(unq.pb)),
Shared=sum(names(unq.loop) %in% names(unq.pb)),
PacBio=sum(!names(unq.pb) %in% names(unq.loop)))
}
t(sapply(sam.names, function(nm) setASV(st.loop[nm,], st.pb[nm,])))
setRead <- function(unq.loop, unq.pb) {
unq.loop <- getUniques(unq.loop); unq.loop <- unq.loop[unq.loop > 0]
unq.pb <- getUniques(unq.pb); unq.pb <- unq.pb[unq.pb > 0]
c(Loop=sum(unq.loop[!names(unq.loop) %in% names(unq.pb)]),
Shared.Loop=sum(unq.loop[names(unq.loop) %in% names(unq.pb)]),
Shared.PacBio=sum(unq.pb[names(unq.loop) %in% names(unq.pb)]),
PacBio=sum(unq.pb[!names(unq.pb) %in% names(unq.loop)]))
}
t(sapply(sam.names, function(nm) setASV(st.loop[nm,], st.pb[nm,])))
setReads <- function(unq.loop, unq.pb) {
unq.loop <- getUniques(unq.loop); unq.loop <- unq.loop[unq.loop > 0]
unq.pb <- getUniques(unq.pb); unq.pb <- unq.pb[unq.pb > 0]
c(Loop=sum(unq.loop[!names(unq.loop) %in% names(unq.pb)]),
Shared.Loop=sum(unq.loop[names(unq.loop) %in% names(unq.pb)]),
Shared.PacBio=sum(unq.pb[names(unq.loop) %in% names(unq.pb)]),
PacBio=sum(unq.pb[!names(unq.pb) %in% names(unq.loop)]))
}
t(sapply(sam.names, function(nm) setReads(st.loop[nm,], st.pb[nm,])))
setReads <- function(unq.loop, unq.pb) {
unq.loop <- getUniques(unq.loop); unq.loop <- unq.loop[unq.loop > 0]
unq.pb <- getUniques(unq.pb); unq.pb <- unq.pb[unq.pb > 0]
c(Loop=sum(unq.loop[!names(unq.loop) %in% names(unq.pb)]),
Shared.Loop=sum(unq.loop[names(unq.loop) %in% names(unq.pb)]),
Shared.PacBio=sum(unq.pb[names(unq.pb) %in% names(unq.loop)]),
PacBio=sum(unq.pb[!names(unq.pb) %in% names(unq.loop)]))
}
t(sapply(sam.names, function(nm) setReads(st.loop[nm,], st.pb[nm,])))
library(vegan)
?metaMDS
library(phyloseq)
phyloseq::ordinate
?pcoa
library(ape, quietly=TRUE)
?pcoa
?vegan::distance
?bray
?vegdist
foo <- vegdist(st)
foo
foo <- vegdist(sweep(st, 1, rowSums(st), "/"))
foo
foo[,1:3]
st[,1:3]
unname(st[,1:3])
rowSums(st)
?mergeSequenceTables
mds
library(vegan, quietly=TRUE)
library(ape, quietly=TRUE)
st.loop.lab <- st.loop
rownames(st.loop.lab) <- gsub("$", ".loop", rownames(st.loop.lab))
st.pb.lab <- st.pb
rownames(st.pb.lab) <- gsub("$", ".pb", rownames(st.pb.lab))
st.both.lab <- mergeSequenceTables(st.loop.lab, st.pb.lab)
ft.both.lab <- sweep(st.loop.lab, 1, rowSums(st.loop.lab), "/")
bc <- vegdist(ft.both.lab, "bray")
mds <- pcoa(bc)
mds
dim(ft.both.lab)
dim(st.pb)
dim(st.loop)
library(vegan, quietly=TRUE)
library(ape, quietly=TRUE)
st.loop.lab <- st.loop
rownames(st.loop.lab) <- gsub("$", ".loop", rownames(st.loop.lab))
st.pb.lab <- st.pb
rownames(st.pb.lab) <- gsub("$", ".pb", rownames(st.pb.lab))
st.both.lab <- mergeSequenceTables(st.loop.lab, st.pb.lab)
ft.both.lab <- sweep(st.both.lab, 1, rowSums(st.both.lab), "/")
bc <- vegdist(ft.both.lab, "bray")
mds <- pcoa(bc)
mds
class(mdf$vectors)
class(mds$vectors)
data.frame(mds$vectors)
?strsplit
library(vegan, quietly=TRUE)
library(ape, quietly=TRUE)
st.loop.lab <- st.loop
rownames(st.loop.lab) <- gsub("$", ".loop", rownames(st.loop.lab))
st.pb.lab <- st.pb
rownames(st.pb.lab) <- gsub("$", ".pb", rownames(st.pb.lab))
st.both.lab <- mergeSequenceTables(st.loop.lab, st.pb.lab)
ft.both.lab <- sweep(st.both.lab, 1, rowSums(st.both.lab), "/")
bc <- vegdist(ft.both.lab, "bray")
mds <- pcoa(bc)
df <- data.frame(mds$vectors)
df$Sample <- substr(rownames(df), 1, 4)
df$Technology <- sapply(strsplit(rownames(df), "[.]"), `[`, 3)
ggplot(data=df, aes=(x=Axis.1, y=Axis.2, label=Sample, color=Technology)) + geom_text()
library(vegan, quietly=TRUE)
library(ape, quietly=TRUE)
st.loop.lab <- st.loop
rownames(st.loop.lab) <- gsub("$", ".loop", rownames(st.loop.lab))
st.pb.lab <- st.pb
rownames(st.pb.lab) <- gsub("$", ".pb", rownames(st.pb.lab))
st.both.lab <- mergeSequenceTables(st.loop.lab, st.pb.lab)
ft.both.lab <- sweep(st.both.lab, 1, rowSums(st.both.lab), "/")
bc <- vegdist(ft.both.lab, "bray")
mds <- pcoa(bc)
df <- data.frame(mds$vectors)
df$Sample <- substr(rownames(df), 1, 4)
df$Technology <- sapply(strsplit(rownames(df), "[.]"), `[`, 3)
ggplot(data=df, aes(x=Axis.1, y=Axis.2, label=Sample, color=Technology)) + geom_text()
library(vegan, quietly=TRUE)
library(ape, quietly=TRUE)
st.loop.lab <- st.loop
rownames(st.loop.lab) <- gsub("$", ".loop", rownames(st.loop.lab))
st.pb.lab <- st.pb
rownames(st.pb.lab) <- gsub("$", ".pb", rownames(st.pb.lab))
st.both.lab <- mergeSequenceTables(st.loop.lab, st.pb.lab)
ft.both.lab <- sweep(st.both.lab, 1, rowSums(st.both.lab), "/")
bc <- vegdist(ft.both.lab, "bray")
mds <- pcoa(bc)
df <- data.frame(mds$vectors)
df$Sample <- substr(rownames(df), 1, 4)
df$Technology <- sapply(strsplit(rownames(df), "[.]"), `[`, 3)
ggplot(data=df, aes(x=Axis.1, y=Axis.2, label=Sample, color=Technology)) + geom_text() + theme_bw()
bc
345,745.00/3
345745.00/3
BiocManager::install("decontam")
library(decontam)
packageVersion("decontam")
load("~/Desktop/Dano.RData")
load("~/Desktop/DanoStats.RData")
head(mdfp.phyla)
library(ggplot2); packageVersion("ggplot2")
library(reshape2); packageVersion("reshape2")
library(phyloseq); packageVersion("phyloseq")
load("~/Desktop/Dano.RData")
load("~/Desktop/DanoStats.RData")
library(RColorBrewer)
library(gridExtra)
ps.phyla <- tax_glom(ps, "Phylum")
taxa_names(ps.phyla) <- as.character(tax_table(ps.phyla)[,"Phylum"])
ps.genus <- tax_glom(ps, "Genus")
taxa_names(ps.genus) <- as.character(tax_table(ps.genus)[,"Genus"])
ma.phyla <- as(otu_table(ps.phyla), "matrix")
dfp.phyla <- cbind(data.frame(sample_data(ps.phyla)), ma.phyla)
phyla <- unname(colnames(ma.phyla))
mdfp.phyla <- melt(dfp.phyla, measure.vars = phyla, value.name="Proportion", variable.name="Phylum")
ma.genus <- as(otu_table(ps.genus), "matrix")
dfg.genus <- cbind(data.frame(sample_data(ps.genus)), ma.genus)
genera <- unname(colnames(ma.genus))
mdfg.genus <- melt(dfg.genus, measure.vars = genera, value.name="Proportion", variable.name="Genus")
abund.phyla <- phyla[colSums(ma.phyla) > 0.01 * sum(ma.phyla)]
ps.abund.phyla <- subset_taxa(ps.phyla, Phylum %in% abund.phyla)
ps.abund.phyla
phylumPalette <- brewer.pal(length(abund.phyla), "Set1")
names(phylumPalette) <- abund.phyla
p.lo <- plot_bar(subset_samples(ps.abund.phyla, Dose=="Low"),
x="Steer", fill="Phylum") + scale_fill_manual(values=phylumPalette) +
facet_wrap(~Time, nrow=1) + ggtitle("Low Dose")
p.hi <- plot_bar(subset_samples(ps.abund.phyla, Dose=="High"),
x="Steer", fill="Phylum") + scale_fill_manual(values=phylumPalette) +
facet_wrap(~Time, nrow=1) + ggtitle("High Dose")
grid.arrange(p.lo, p.hi, nrow=2)
ggplot(data=mdfp.phyla, aes(x=Time, y=Proportion, color=Phylum)) +
#  scale_color_manual(values=phylumPalette) +
geom_point() + geom_smooth() + facet_wrap(~Dose, nrow=2) + ggtitle("Phyla")
ggplot(data=mdfp.phyla[mdfp.phyla$Phylum %in% abund.phyla,], aes(x=Time, y=Proportion, color=Phylum)) +
scale_color_manual(values=phylumPalette) +
geom_point() + geom_smooth() + facet_wrap(~Dose, nrow=2) + ggtitle("Phyla (>1%)")
ggplot(data=mdfg.genus[mdfg.genus$Genus %in% "Methanobrevibacter",], aes(x=Time, y=Proportion, color=Steer)) +
geom_point() + geom_line() + facet_wrap(~Dose, nrow=2) + ggtitle("Methanobrevibacter")
head(mdfp.phyla)
head(sigtab)
head(taxa_nams(ps))
head(taxnams(ps))
head(taxnames(ps))
head(taxa_names(ps))
ma.asv <- as(otu_table(ps), "matrix")
dfp.asv <- cbind(data.frame(sample_data(ps)), ma)
dfp.asv <- cbind(data.frame(sample_data(ps)), ma.asv)
head(dfp.asv)
dim(dfp.asv)
head(dfp.asv[,1:20])
asvs <- unname(colnames(ma.asv))
mdfp.asv <- melt(dfp.asv, measure.vars = asvs, value.name="Proportion", variable.name="Phylum")
head(mdfp.asv)
head(sigtab)
?merge
mdfp.asv <- melt(dfp.asv, measure.vars = asvs, value.name="Proportion", variable.name="ASV")
foo <- merge(mdfp.asv, sigtab, by.x=ASV, y=row.names)
dim(mdfp.asv)
foo <- mdfp.asv[mdfp.asv$ASV %in% rownames(possigtab),]
foo <- mdfp.asv[mdfp.asv$ASV %in% rownames(posigtab),]
head(foo)
dim(foo)
bar <- merge(foo, sigtab, by.x=ASV, y=row.names)
head(posigtab)
mdfp.asv$padj <- posigtab[mdfp.asv$asv,"padj"]
head(mdfp.asv$ASV)
ma.asv <- as(otu_table(ps), "matrix")
dfp.asv <- cbind(data.frame(sample_data(ps), stringsAsFactors=FALSE), ma.asv)
asvs <- unname(colnames(ma.asv))
mdfp.asv <- melt(dfp.asv, measure.vars = asvs, value.name="Proportion", variable.name="ASV")
mdfp.asv$padj <- posigtab[mdfp.asv$ASV,"padj"]
mdfp.asv$baseMean <- posigtab[mdfp.asv$ASV,"baseMean"]
mdfp.asv$log2FoldChange <- posigtab[mdfp.asv$log2FoldChange,"baseMean"]
mdfp.asv$log2FoldChange <- posigtab[mdfp.asv$ASV,"log2FoldChange"]
head(mdfp.asv)
# Jen: Not working
DA.phyla <- cbind(data.frame(sample_data(mdfp.phyla)), sigtab)
DA.phyla <- cbind(data.frame(sample_data(mdfp.phyla)), sigtab)
head(mdfp.phyla)
head(sigtab)
ma.asv <- as(otu_table(ps), "matrix")
dfp.asv <- cbind(data.frame(sample_data(ps), stringsAsFactors=FALSE), ma.asv)
asvs <- unname(colnames(ma.asv))
mdfp.asv <- melt(dfp.asv, measure.vars = asvs, value.name="Proportion", variable.name="ASV")
head(mdfp.asv)
dim(mdfp.asv)
head(sigtab)
dim(sigtab)
head(sigtab)
sigtab[1,1]
sigtab["ASV850",1]
# Make new columns in mdfp.asv
mdfp.asv$padj <- sigtab[mdfp.asv$ASV,"padj"]
mdfp.asv$baseMean <- sigtab[mdfp.asv$ASV,"baseMean"]
mdfp.asv$log2FoldChange <- sigtab[mdfp.asv$ASV,"log2FoldChange"]
head(mdfp.asv)
df <- mdfp.asv[mdfp.asv$ASV=="ASV1",]
ggplot(data=df, aes(x=Dose, y=Proportion)) + geom_point()
ggplot(data=df, aes(x=Dose, y=Proportion)) + geom_boxplot()
levels(mdfp.asv$Dose)
head(posigtab)
dim(posigtab)
ggplot(data=mdfp.asv[mdfp.asv$ASV=="ASV684"], aes(x=Dose, y=Proportion)) + geom_point()
ggplot(data=mdfp.asv[mdfp.asv$ASV=="ASV684",], aes(x=Dose, y=Proportion)) + geom_point()
library(ggplot2); packageVersion("ggplot2")
library(reshape2); packageVersion("reshape2")
library(phyloseq); packageVersion("phyloseq")
library(RColorBrewer)
library(gridExtra)
load("~/Desktop/Dano/Dano.RData")
load("~/Desktop/Dano/DanoStats.RData")
pstransform <- transform_sample_counts(ps, function(x) {x/sum(x)})
ma.asv <- as(otu_table(pstransform), "matrix")
dfp.asv <- cbind(data.frame(sample_data(pstransform), stringsAsFactors=FALSE), ma.asv)
asvs <- unname(colnames(ma.asv))
mdfp.asv <- melt(dfp.asv, measure.vars = asvs, value.name="Relative Abundance", variable.name="ASV")
head(mdfp.asv)
sample_sums(pstransform) ## BJC: Yep
head(sigtab)
####!!!!
mdfp.asv$ASV <- as.character(mdfp.asv$ASV)
mdfp.asv$padj <- sigtab[mdfp.asv$ASV,"padj"]
mdfp.asv$baseMean <- sigtab[mdfp.asv$ASV,"baseMean"]
mdfp.asv$log2FoldChange <- sigtab[mdfp.asv$ASV,"log2FoldChange"]
mdfp.asv$Phylum <- sigtab[mdfp.asv$ASV, "Phylum"]
mdfp.asv$Class <- sigtab[mdfp.asv$ASV, "Class"]
mdfp.asv$Family <- sigtab[mdfp.asv$ASV, "Family"]
head(mdfp.asv)
df <- mdfp.asv[mdfp.asv$ASV=="ASV1",]
ggplot(data=df, aes(x=df$Dose, y=df$`Relative Abundance`)) + geom_boxplot()
df <- mdfp.asv[mdfp.asv$ASV=="ASV850",]
ggplot(data=df, aes(x=df$Dose, y=df$`Relative Abundance`)) + geom_boxplot()
install.packages("kersas")
install.packages("keras")
library(keras)
citation(keras)
citation(package=keras")
""
citation(package="keras")
library(caret)
install.packages(caret)
install.packages("caret")
library(caret)
help(package="caret")
citation("caret")
library(RandomForest)
install.packages("RandomForest")
install.packages("randomForest")
library(randomForest)
citation("randomForest")
citation
citation()
setwd("~/Desktop/Gookin/19_JG1-16S-2-q2-gg")
list.files()
?read.table
mapdf <- read.table("19_JG1-16S-2.mapping.txt", sep="\t",
header=TRUE, comment.char="")
dim(mapdf)
colnames(mapdf)
rownames(mapdf)
mapdf <- read.table("19_JG1-16S-2.mapping.txt", sep="\t",
header=TRUE, comment.char="", row.names=1)
dim(mapdf)
rownames(mapdf)
mapdf[1,]
colnames(mapdf)
mapdf <- read.table("19_JG1-16S-2.mapping.txt", sep="\t",
header=TRUE, comment.char="")
dim(mapdf)
rownames(mapdf)
mapdf[1,]
mapdf <- read.table("19_JG1-16S-2.mapping.txt", sep="\t",
header=TRUE, comment.char="#q2")
# By hand remove # from first row
mapdf <- read.table("19_JG1-16S-2.mapping.R.txt", sep="\t",
header=TRUE, comment.char="#")
# By hand remove # from first row
mapdf <- read.table("19_JG1-16S-2.mapping.R.txt", sep="\t",
header=TRUE, comment.char="#")
dim(mapdf)
rownames(mapdf)
mapdf[1,]
mapdf[1,]
colnames(mapdf)
# By hand remove # from first row
mapdf <- read.table("19_JG1-16S-2.mapping.R.txt", sep="\t",
header=TRUE, comment.char="#")
dim(mapdf)
rownames(mapdf)
mapdf[1,]
colnames(mapdf)
head(mapdf$SampleID)
# By hand remove # from first row
mapdf <- read.table("19_JG1-16S-2.mapping.R.txt", sep="\t",
header=TRUE, comment.char="#",
stringsAsFactors=FALSE)
dim(mapdf)
rownames(mapdf)
mapdf[1,]
colnames(mapdf)
head(mapdf$SampleID)
mapdf$Animal <- sapply(substr(mapdf$SampleID, "-"), `[`, 2)
sapply(substr(mapdf$SampleID, "-"), `[`, 2)
mapdf$SampleID
substr(mapdf$SampleID, "-")
mapdf$Animal <- sapply(strsplit(mapdf$SampleID, "-"), `[`, 2)
rownames(mapdf) <- mapdf$Animal
table(mapdf$Animal)
colnames(mapdf)
table(mapdf$Pool)
table(mapdf$Agemonths)
mapdf[mapdf$Animal == "Lilly",]
multis <- mapdf$Animal[duplicated[mapdf$Animal]]
multis <- mapdf$Animal[duplicated(mapdf$Animal)]
mapdf[mapdf$Animal %in% multis,]
colnames(mapdf)
table(mapdf$Pool)
table(mapdf$Agemonths)
table(mapdf$Lifestage)
mapdf[mapdf$Lifestage=="Unknown",]
?table
colnames(mapdf)
table(mapdf$Pool, useNA="ifany")
table(mapdf$Agemonths, useNA="ifany") # Spread from 3mo - 15yr
table(mapdf$Lifestage, useNA="ifany") # Unknown?
colnames(mapdf)
table(mapdf$Breed)
table(mapdf$Sex)
table(mapdf$Alt)
table(mapdf$Sex, mapdf$Alt)
table(mapdf$FormofCollection)
table(mapdf$PCRResults)
table(mapdf$PCRClinicalsigns)
table(mapdf$Clinicalsigns)
table(mapdf$PCRResults)
table(mapdf$Clinicalsigns)
table(mapdf$PCRClinicalsigns)
table(mapdf$PCRResults, mapdf$Clinicalsigns)
table(mapdf$Clinicalsigns, mapdf$PCRResults)
# No support for more PCR positive w/ Diarrhea, opposite sign effect
table(mapdf$Treatmentany)
table(mapdf$Treatmentchlorambucil)
table(mapdf$Treatmentdiet)
